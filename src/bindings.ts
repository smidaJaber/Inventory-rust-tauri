/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function getUserByEmailPwd(username: string, password: string) {
    return invoke()<User | null>("get_user_by_email_pwd", { username,password })
}

export function getAllComptebancaires(skip: number | null, limit: number | null) {
    return invoke()<Comptebancaire[]>("get_all_comptebancaires", { skip,limit })
}

export function getComptebancaireById(id: string) {
    return invoke()<Comptebancaire | null>("get_comptebancaire_by_id", { id })
}

export function updateComptebancaire(id: number, updatedComptebancaire: NewComptebancaire) {
    return invoke()<null>("update_comptebancaire", { id,updatedComptebancaire })
}

export function deleteComptebancaire(id: number) {
    return invoke()<null>("delete_comptebancaire", { id })
}

export function insertComptebancaire(newComptebancaire: NewComptebancaire) {
    return invoke()<number>("insert_comptebancaire", { newComptebancaire })
}

export function getAllDepenses(skip: number | null, limit: number | null) {
    return invoke()<Depense[]>("get_all_depenses", { skip,limit })
}

export function getDepenseById(id: string) {
    return invoke()<Depense | null>("get_depense_by_id", { id })
}

export function updateDepense(id: number, updatedDepense: NewDepense) {
    return invoke()<null>("update_depense", { id,updatedDepense })
}

export function deleteDepense(id: number) {
    return invoke()<null>("delete_depense", { id })
}

export function insertDepense(newDepense: NewDepense) {
    return invoke()<number>("insert_depense", { newDepense })
}

export function getAllDocuments(skip: number | null, limit: number | null) {
    return invoke()<Document[]>("get_all_documents", { skip,limit })
}

export function getDocumentById(id: string) {
    return invoke()<Document | null>("get_document_by_id", { id })
}

export function updateDocument(id: number, updatedDocument: NewDocument) {
    return invoke()<null>("update_document", { id,updatedDocument })
}

export function deleteDocument(id: number) {
    return invoke()<null>("delete_document", { id })
}

export function insertDocument(newDocument: NewDocument) {
    return invoke()<number>("insert_document", { newDocument })
}

export function getAllEmballages(skip: number | null, limit: number | null) {
    return invoke()<Emballage[]>("get_all_emballages", { skip,limit })
}

export function getEmballageById(id: string) {
    return invoke()<Emballage | null>("get_emballage_by_id", { id })
}

export function updateEmballage(id: number, updatedEmballage: NewEmballage) {
    return invoke()<null>("update_emballage", { id,updatedEmballage })
}

export function deleteEmballage(id: number) {
    return invoke()<null>("delete_emballage", { id })
}

export function insertEmballage(newEmballage: NewEmballage) {
    return invoke()<number>("insert_emballage", { newEmballage })
}

export function getAllEntreprises(skip: number | null, limit: number | null) {
    return invoke()<Entreprise[]>("get_all_entreprises", { skip,limit })
}

export function getEntrepriseById(id: string) {
    return invoke()<Entreprise | null>("get_entreprise_by_id", { id })
}

export function updateEntreprise(id: number, updatedEntreprise: NewEntreprise) {
    return invoke()<null>("update_entreprise", { id,updatedEntreprise })
}

export function deleteEntreprise(id: number) {
    return invoke()<null>("delete_entreprise", { id })
}

export function insertEntreprise(newEntreprise: NewEntreprise) {
    return invoke()<number>("insert_entreprise", { newEntreprise })
}

export function getAllEquipements(skip: number | null, limit: number | null) {
    return invoke()<Equipement[]>("get_all_equipements", { skip,limit })
}

export function getEquipementById(id: string) {
    return invoke()<Equipement | null>("get_equipement_by_id", { id })
}

export function updateEquipement(id: number, updatedEquipement: NewEquipement) {
    return invoke()<null>("update_equipement", { id,updatedEquipement })
}

export function deleteEquipement(id: number) {
    return invoke()<null>("delete_equipement", { id })
}

export function insertEquipement(newEquipement: NewEquipement) {
    return invoke()<number>("insert_equipement", { newEquipement })
}

export function getAllFactures(skip: number | null, limit: number | null) {
    return invoke()<Facture[]>("get_all_factures", { skip,limit })
}

export function getFactureById(id: string) {
    return invoke()<Facture | null>("get_facture_by_id", { id })
}

export function updateFacture(id: number, updatedFacture: NewFacture) {
    return invoke()<null>("update_facture", { id,updatedFacture })
}

export function deleteFacture(id: number) {
    return invoke()<null>("delete_facture", { id })
}

export function insertFacture(newFacture: NewFacture) {
    return invoke()<number>("insert_facture", { newFacture })
}

export function getAllFactureexports(skip: number | null, limit: number | null) {
    return invoke()<Factureexport[]>("get_all_factureexports", { skip,limit })
}

export function getFactureexportById(id: string) {
    return invoke()<Factureexport | null>("get_factureexport_by_id", { id })
}

export function updateFactureexport(id: number, updatedFactureexport: NewFactureexport) {
    return invoke()<null>("update_factureexport", { id,updatedFactureexport })
}

export function deleteFactureexport(id: number) {
    return invoke()<null>("delete_factureexport", { id })
}

export function insertFactureexport(newFactureexport: NewFactureexport) {
    return invoke()<number>("insert_factureexport", { newFactureexport })
}

export function getAllFournisseurs(skip: number | null, limit: number | null) {
    return invoke()<Fournisseur[]>("get_all_fournisseurs", { skip,limit })
}

export function getFournisseurById(id: string) {
    return invoke()<Fournisseur | null>("get_fournisseur_by_id", { id })
}

export function updateFournisseur(id: number, updatedFournisseur: NewFournisseur) {
    return invoke()<null>("update_fournisseur", { id,updatedFournisseur })
}

export function deleteFournisseur(id: number) {
    return invoke()<null>("delete_fournisseur", { id })
}

export function insertFournisseur(newFournisseur: NewFournisseur) {
    return invoke()<number>("insert_fournisseur", { newFournisseur })
}

export function getAllLieustockages(skip: number | null, limit: number | null) {
    return invoke()<Lieustockage[]>("get_all_lieustockages", { skip,limit })
}

export function getLieustockageById(id: string) {
    return invoke()<Lieustockage | null>("get_lieustockage_by_id", { id })
}

export function updateLieustockage(id: number, updatedLieustockage: NewLieustockage) {
    return invoke()<null>("update_lieustockage", { id,updatedLieustockage })
}

export function deleteLieustockage(id: number) {
    return invoke()<null>("delete_lieustockage", { id })
}

export function insertLieustockage(newLieustockage: NewLieustockage) {
    return invoke()<number>("insert_lieustockage", { newLieustockage })
}

export function getAllLieutravails(skip: number | null, limit: number | null) {
    return invoke()<Lieutravail[]>("get_all_lieutravails", { skip,limit })
}

export function getLieutravailById(id: string) {
    return invoke()<Lieutravail | null>("get_lieutravail_by_id", { id })
}

export function updateLieutravail(id: number, updatedLieutravail: NewLieutravail) {
    return invoke()<null>("update_lieutravail", { id,updatedLieutravail })
}

export function deleteLieutravail(id: number) {
    return invoke()<null>("delete_lieutravail", { id })
}

export function insertLieutravail(newLieutravail: NewLieutravail) {
    return invoke()<number>("insert_lieutravail", { newLieutravail })
}

export function getAllLocals(skip: number | null, limit: number | null) {
    return invoke()<Local[]>("get_all_locals", { skip,limit })
}

export function getLocalById(id: string) {
    return invoke()<Local | null>("get_local_by_id", { id })
}

export function updateLocal(id: number, updatedLocal: NewLocal) {
    return invoke()<null>("update_local", { id,updatedLocal })
}

export function deleteLocal(id: number) {
    return invoke()<null>("delete_local", { id })
}

export function insertLocal(newLocal: NewLocal) {
    return invoke()<number>("insert_local", { newLocal })
}

export function getAllPaiements(skip: number | null, limit: number | null) {
    return invoke()<Paiement[]>("get_all_paiements", { skip,limit })
}

export function getPaiementById(id: string) {
    return invoke()<Paiement | null>("get_paiement_by_id", { id })
}

export function updatePaiement(id: number, updatedPaiement: NewPaiement) {
    return invoke()<null>("update_paiement", { id,updatedPaiement })
}

export function deletePaiement(id: number) {
    return invoke()<null>("delete_paiement", { id })
}

export function insertPaiement(newPaiement: NewPaiement) {
    return invoke()<number>("insert_paiement", { newPaiement })
}

export function getAllPersonnels(skip: number | null, limit: number | null) {
    return invoke()<Personnel[]>("get_all_personnels", { skip,limit })
}

export function getPersonnelById(id: string) {
    return invoke()<Personnel | null>("get_personnel_by_id", { id })
}

export function updatePersonnel(id: number, updatedPersonnel: NewPersonnel) {
    return invoke()<null>("update_personnel", { id,updatedPersonnel })
}

export function deletePersonnel(id: number) {
    return invoke()<null>("delete_personnel", { id })
}

export function insertPersonnel(newPersonnel: NewPersonnel) {
    return invoke()<number>("insert_personnel", { newPersonnel })
}

export function getAllProduits(skip: number | null, limit: number | null) {
    return invoke()<Produit[]>("get_all_produits", { skip,limit })
}

export function getProduitById(id: string) {
    return invoke()<Produit | null>("get_produit_by_id", { id })
}

export function updateProduit(id: number, updatedProduit: NewProduit) {
    return invoke()<null>("update_produit", { id,updatedProduit })
}

export function deleteProduit(id: number) {
    return invoke()<null>("delete_produit", { id })
}

export function insertProduit(newProduit: NewProduit) {
    return invoke()<number>("insert_produit", { newProduit })
}

export function getAllSaisons(skip: number | null, limit: number | null) {
    return invoke()<Saison[]>("get_all_saisons", { skip,limit })
}

export function getSaisonById(id: string) {
    return invoke()<Saison | null>("get_saison_by_id", { id })
}

export function updateSaison(id: number, updatedSaison: NewSaison) {
    return invoke()<null>("update_saison", { id,updatedSaison })
}

export function deleteSaison(id: number) {
    return invoke()<null>("delete_saison", { id })
}

export function insertSaison(newSaison: NewSaison) {
    return invoke()<number>("insert_saison", { newSaison })
}

export function getAllSessions(skip: number | null, limit: number | null) {
    return invoke()<Session[]>("get_all_sessions", { skip,limit })
}

export function getSessionById(id: string) {
    return invoke()<Session | null>("get_session_by_id", { id })
}

export function updateSession(id: number, updatedSession: NewSession) {
    return invoke()<null>("update_session", { id,updatedSession })
}

export function deleteSession(id: number) {
    return invoke()<null>("delete_session", { id })
}

export function insertSession(newSession: NewSession) {
    return invoke()<number>("insert_session", { newSession })
}

export function getAllSettings(skip: number | null, limit: number | null) {
    return invoke()<Setting[]>("get_all_settings", { skip,limit })
}

export function getSettingById(id: string) {
    return invoke()<Setting | null>("get_setting_by_id", { id })
}

export function updateSetting(id: number, updatedSetting: NewSetting) {
    return invoke()<null>("update_setting", { id,updatedSetting })
}

export function deleteSetting(id: number) {
    return invoke()<null>("delete_setting", { id })
}

export function insertSetting(newSetting: NewSetting) {
    return invoke()<number>("insert_setting", { newSetting })
}

export function getAllTableachats(skip: number | null, limit: number | null) {
    return invoke()<Tableachat[]>("get_all_tableachats", { skip,limit })
}

export function getAllOppsAchatMultiDb(skip: number | null, limit: number | null, databases: string[] | null) {
    return invoke()<FormattedDataResultsAchats[]>("get_all_opps_achat_multi_db", { skip,limit,databases })
}

export function getTableachatById(id: string) {
    return invoke()<Tableachat | null>("get_tableachat_by_id", { id })
}

export function updateTableachat(id: number, updatedTableachat: NewTableachat) {
    return invoke()<null>("update_tableachat", { id,updatedTableachat })
}

export function deleteTableachat(id: number) {
    return invoke()<null>("delete_tableachat", { id })
}

export function insertTableachat(newTableachat: NewTableachat) {
    return invoke()<number>("insert_tableachat", { newTableachat })
}

export function getAllTablearchivedocs(skip: number | null, limit: number | null) {
    return invoke()<Tablearchivedoc[]>("get_all_tablearchivedocs", { skip,limit })
}

export function getTablearchivedocById(id: string) {
    return invoke()<Tablearchivedoc | null>("get_tablearchivedoc_by_id", { id })
}

export function updateTablearchivedoc(id: number, updatedTablearchivedoc: NewTablearchivedoc) {
    return invoke()<null>("update_tablearchivedoc", { id,updatedTablearchivedoc })
}

export function deleteTablearchivedoc(id: number) {
    return invoke()<null>("delete_tablearchivedoc", { id })
}

export function insertTablearchivedoc(newTablearchivedoc: NewTablearchivedoc) {
    return invoke()<number>("insert_tablearchivedoc", { newTablearchivedoc })
}

export function getAllTabledepenses(skip: number | null, limit: number | null) {
    return invoke()<Tabledepense[]>("get_all_tabledepenses", { skip,limit })
}

export function getTabledepenseById(id: string) {
    return invoke()<Tabledepense | null>("get_tabledepense_by_id", { id })
}

export function updateTabledepense(id: number, updatedTabledepense: NewTabledepense) {
    return invoke()<null>("update_tabledepense", { id,updatedTabledepense })
}

export function deleteTabledepense(id: number) {
    return invoke()<null>("delete_tabledepense", { id })
}

export function insertTabledepense(newTabledepense: NewTabledepense) {
    return invoke()<number>("insert_tabledepense", { newTabledepense })
}

export function getAllTabledocdocs(skip: number | null, limit: number | null) {
    return invoke()<Tabledocdoc[]>("get_all_tabledocdocs", { skip,limit })
}

export function getTabledocdocById(id: string) {
    return invoke()<Tabledocdoc | null>("get_tabledocdoc_by_id", { id })
}

export function updateTabledocdoc(id: number, updatedTabledocdoc: NewTabledocdoc) {
    return invoke()<null>("update_tabledocdoc", { id,updatedTabledocdoc })
}

export function deleteTabledocdoc(id: number) {
    return invoke()<null>("delete_tabledocdoc", { id })
}

export function insertTabledocdoc(newTabledocdoc: NewTabledocdoc) {
    return invoke()<number>("insert_tabledocdoc", { newTabledocdoc })
}

export function getAllTablefactureavoirs(skip: number | null, limit: number | null) {
    return invoke()<Tablefactureavoir[]>("get_all_tablefactureavoirs", { skip,limit })
}

export function getTablefactureavoirById(id: string) {
    return invoke()<Tablefactureavoir | null>("get_tablefactureavoir_by_id", { id })
}

export function updateTablefactureavoir(id: number, updatedTablefactureavoir: NewTablefactureavoir) {
    return invoke()<null>("update_tablefactureavoir", { id,updatedTablefactureavoir })
}

export function deleteTablefactureavoir(id: number) {
    return invoke()<null>("delete_tablefactureavoir", { id })
}

export function insertTablefactureavoir(newTablefactureavoir: NewTablefactureavoir) {
    return invoke()<number>("insert_tablefactureavoir", { newTablefactureavoir })
}

export function getAllTablepointages(skip: number | null, limit: number | null) {
    return invoke()<Tablepointage[]>("get_all_tablepointages", { skip,limit })
}

export function getTablepointageById(id: string) {
    return invoke()<Tablepointage | null>("get_tablepointage_by_id", { id })
}

export function updateTablepointage(id: number, updatedTablepointage: NewTablepointage) {
    return invoke()<null>("update_tablepointage", { id,updatedTablepointage })
}

export function deleteTablepointage(id: number) {
    return invoke()<null>("delete_tablepointage", { id })
}

export function insertTablepointage(newTablepointage: NewTablepointage) {
    return invoke()<number>("insert_tablepointage", { newTablepointage })
}

export function getAllTableressourceachats(skip: number | null, limit: number | null) {
    return invoke()<Tableressourceachat[]>("get_all_tableressourceachats", { skip,limit })
}

export function getAllRessAchatMultiDb(skip: number | null, limit: number | null, databases: string[] | null) {
    return invoke()<FormattedDataResultsRessAchats[]>("get_all_ress_achat_multi_db", { skip,limit,databases })
}

export function getTableressourceachatById(id: string) {
    return invoke()<Tableressourceachat | null>("get_tableressourceachat_by_id", { id })
}

export function updateTableressourceachat(id: number, updatedTableressourceachat: NewTableressourceachat) {
    return invoke()<null>("update_tableressourceachat", { id,updatedTableressourceachat })
}

export function deleteTableressourceachat(id: number) {
    return invoke()<null>("delete_tableressourceachat", { id })
}

export function insertTableressourceachat(newTableressourceachat: NewTableressourceachat) {
    return invoke()<number>("insert_tableressourceachat", { newTableressourceachat })
}

export function getAllTableressourceventes(skip: number | null, limit: number | null) {
    return invoke()<Tableressourcevente[]>("get_all_tableressourceventes", { skip,limit })
}

export function getTableressourceventeById(id: string) {
    return invoke()<Tableressourcevente | null>("get_tableressourcevente_by_id", { id })
}

export function updateTableressourcevente(id: number, updatedTableressourcevente: NewTableressourcevente) {
    return invoke()<null>("update_tableressourcevente", { id,updatedTableressourcevente })
}

export function deleteTableressourcevente(id: number) {
    return invoke()<null>("delete_tableressourcevente", { id })
}

export function insertTableressourcevente(newTableressourcevente: NewTableressourcevente) {
    return invoke()<number>("insert_tableressourcevente", { newTableressourcevente })
}

export function getAllTabletransferts(skip: number | null, limit: number | null) {
    return invoke()<Tabletransfert[]>("get_all_tabletransferts", { skip,limit })
}

export function getTabletransfertById(id: string) {
    return invoke()<Tabletransfert | null>("get_tabletransfert_by_id", { id })
}

export function updateTabletransfert(id: number, updatedTabletransfert: NewTabletransfert) {
    return invoke()<null>("update_tabletransfert", { id,updatedTabletransfert })
}

export function deleteTabletransfert(id: number) {
    return invoke()<null>("delete_tabletransfert", { id })
}

export function insertTabletransfert(newTabletransfert: NewTabletransfert) {
    return invoke()<number>("insert_tabletransfert", { newTabletransfert })
}

export function getAllTableventes(skip: number | null, limit: number | null) {
    return invoke()<Tablevente[]>("get_all_tableventes", { skip,limit })
}

export function getTableventeById(id: string) {
    return invoke()<Tablevente | null>("get_tablevente_by_id", { id })
}

export function updateTablevente(id: number, updatedTablevente: NewTablevente) {
    return invoke()<null>("update_tablevente", { id,updatedTablevente })
}

export function deleteTablevente(id: number) {
    return invoke()<null>("delete_tablevente", { id })
}

export function insertTablevente(newTablevente: NewTablevente) {
    return invoke()<number>("insert_tablevente", { newTablevente })
}

export function getAllTypeproduits(skip: number | null, limit: number | null) {
    return invoke()<Typeproduit[]>("get_all_typeproduits", { skip,limit })
}

export function getTypeproduitById(id: string) {
    return invoke()<Typeproduit | null>("get_typeproduit_by_id", { id })
}

export function updateTypeproduit(id: number, updatedTypeproduit: NewTypeproduit) {
    return invoke()<null>("update_typeproduit", { id,updatedTypeproduit })
}

export function deleteTypeproduit(id: number) {
    return invoke()<null>("delete_typeproduit", { id })
}

export function insertTypeproduit(newTypeproduit: NewTypeproduit) {
    return invoke()<number>("insert_typeproduit", { newTypeproduit })
}

export function getAllUsers(skip: number | null, limit: number | null) {
    return invoke()<User[]>("get_all_users", { skip,limit })
}

export function getUserById(id: string) {
    return invoke()<User | null>("get_user_by_id", { id })
}

export function updateUser(id: number, updatedUser: NewUser) {
    return invoke()<null>("update_user", { id,updatedUser })
}

export function deleteUser(id: number) {
    return invoke()<null>("delete_user", { id })
}

export function insertUser(newUser: NewUser) {
    return invoke()<number>("insert_user", { newUser })
}

export function exportDb() {
    return invoke()<string>("export_db")
}

export function getAllFournisseursMultiDb(skip: number | null, limit: number | null, databases: string[] | null) {
    return invoke()<FormattedDataResults[]>("get_all_fournisseurs_multi_db", { skip,limit,databases })
}

export function getTotaux(request: GetTotauxRequest) {
    return invoke()<GetTotauxResponse>("get_totaux", { request })
}

export function getTotauxRess(request: GetTotauxRequest) {
    return invoke()<GetTotauxRessResponse>("get_totaux_ress", { request })
}

export function getTotauxOpps(request: GetTotauxRequest) {
    return invoke()<GetTotauxOppsResponse>("get_totaux_opps", { request })
}

export type GetTotauxOppsResponse = { oppmont: number; oppcaisse: number; oppemb: number; oppmat1: number; oppmat2: number }
export type NewFacture = { numero: number; iddoc: number; idclient: number; type_fact: string; date_facture: string; op1: number; op2: number; op3: number; op4: number; op5: number; op6: number; op7: number; op8: number; op9: number; op10: number; information: string; idbon_rec: number; numero_bon_rec: number; idbon_com: number; numero_bon_com: number; idbon_con: number; numero_bon_con: number; iduser: number; identreprise: number; liste_idopps: string }
export type Emballage = { idemballage: number; nom: string; poid: string; type_emb: string; composition: string; information: string; iduser: number }
export type Equipement = { idequip: number; nom: string; periode_revision: number; statut: string; idbon: number; information: string; date_mise_en_service: string; date_control: string; iduser: number }
export type NewEmballage = { nom: string; poid: string; type_emb: string; composition: string; information: string; iduser: number }
export type NewEntreprise = { nom_entreprise: string; adresse: string; tel: string; fax: string; mail: string; matricule: string; information: string; iduser: number }
export type GetTotauxRessResponse = { opp_ress_mont: number; opp_ress_mat: number; opp_ress_emb: number; opp_ress_caisse: number }
export type NewTableachat = { idfournisseur: number; type_caisse: number; nbr_caisse: number; nbr_cs: number; nbr_cn: number; nbr_ca: number; matriel1: number; nbr_m1: number; matriel2: number; nbr_m2: number; emballage: number; nbr_emballage: number; nbr_cov: number; nbr_fon: number; matiere_principale: number; qte_brut: number; qte_net: number; prix_unit: number; montant: number; date_achat: string; observation: string; num_fact: number; idbon_reclam: number; idbon_recp: number; idbon_entree: number; idcateg: number; iduser: number; type_produit: number; lieu_stock: number; selected: string; num_lot: string }
export type Document = { iddoc: number; code: string; reference: string; revision: string; audit: string; information: string; date_creation: string; url: string; iduser: number; setting_for: string }
export type Tabledepense = { iddepense: number; idtype_depense: number; montant: number; idcateg: number; information: string; date_depense: string; document: number; numero: string; iduser: number }
export type Tablepointage = { idpointage: number; liste_pointage: string; date_pointage: string; nbr_personnel: number; montant: number; avance: number; lieutravail: string; idcateg: string; information: string; iduser: number }
export type NewTablevente = { idclient: number; type_caisse: number; nbr_caisse: number; nbr_cs: number; nbr_cn: number; nbr_ca: number; matriel1: number; nbr_m1: number; matriel2: number; nbr_m2: number; emballage: number; nbr_emballage: number; nbr_cov: number; nbr_fon: number; matiere_principale: number; qte_brut: number; qte_net: number; prix_unit: number; montant: number; date_vente: string; observation: string; num_fact: number; idbon_reclam: number; idbon_recp: number; idbon_entree: number; idcateg: number; iduser: number; type_produit: number; lieu_stock: number; selected: string; num_lot: string }
export type NewLocal = { section: string; adresse: string; information: string; iduser: number }
export type NewPersonnel = { nom_prenom: string; cin: string; date_naissance: string; sexe: string; adresse: string; tel: string; date_recrutement: string; statut: string; titre: string; iduser: number; prix_h: number; prix_j: number; prix_u: number; idcv: number; idcontrat: number; iddocument: number }
export type NewTablefactureavoir = { idfact: number; idclient: number; type_produit: string; montant: number; reference_doc: number; information: string; iduser: number; date_facture_avoir: string; idcateg: number }
export type Tabledocdoc = { iddoc_doc: number; numero: number; reference: string; iddoc: number; iduser: number }
export type Tableressourceachat = { idres_achat: number; idfornisseur: number; montant: number; type_paiement: number; nbr_cs: number; nbr_cn: number; nbr_ca: number; type_caisse: number; nbr_matriel: number; type_matriel: number; emballage: number; nbr_emb: number; nbr_cov: number; nbr_fon: number; information: string; date_ressource_achat: string; lieu_stock: number; iddoc: number; iduser: number }
export type Session = { idsession: number; expires: number; data: string }
export type NewTabledepense = { idtype_depense: number; montant: number; idcateg: number; information: string; date_depense: string; document: number; numero: string; iduser: number }
export type FormattedDataResultsAchats = { dbname: string; data: Tableachat[] }
export type Fournisseur = { idfournisseur_prod: number; nom: string; adresse: string; tel_mob: string; tel_fix: string; mail: string; fax: string; specialite: string; note: string; rib: string; matricule: string; date_creation: string; ajouter_par: number; statut: string; information: string; type_fornisseur: string; iduser: number }
export type NewTablepointage = { liste_pointage: string; date_pointage: string; nbr_personnel: number; montant: number; avance: number; lieutravail: string; idcateg: string; information: string; iduser: number }
export type NewTabledocdoc = { numero: number; reference: string; iddoc: number; iduser: number }
export type Saison = { idsaison: number; annee: string; nom: string; information: string; iduser: number }
export type Entreprise = { identreprise: number; nom_entreprise: string; adresse: string; tel: string; fax: string; mail: string; matricule: string; information: string; iduser: number }
export type NewTabletransfert = { de: number; a: number; nbr_caisse: number; type_caisse: number; nbr_cn: number; nbr_cs: number; nbr_ca: number; qte_net: number; produit: number; nbr_matriel: number; matriel: number; idemballage: number; nbr_emb: number; nbr_cov: number; nbr_fond: number; information: string; date_transfer: string; iduser: number }
export type NewTypeproduit = { nom: string; information: string; iduser: number }
export type User = { iduser: number; login: string; password: string; role: string; date_creation: string; last_login: string; is_connected: number; locked: number; nbr_attempts: number; allowed_module: string; deleted: number; created_by: number; theme: string; user_agent: string }
export type NewSetting = { iddoc_normal: number; iddoc_impexp: number; iddoc_avoir: number; iddoc_normal_vente: number; iddoc_impexpvente: number; iddoc_avoir_vente: number; identreprise: number; idcompte: number; iddoc_devis: number; iddoc_proformat: number; liste_ids_doc_to_print: string; iddoc_rapport: number; iddoc_scann: number; iduser: number }
export type Factureexport = { idfact: number; numero: string; iddoc: number; idclient: number; type_fact: string; date_facture_export: string; op1: number; op2: number; op3: number; op4: number; op5: number; op6: number; op7: number; op8: number; op9: number; op10: number; information: string; idbon_rec: number; numero_bon_rec: number; idbon_com: number; numero_bon_com: number; idbon_con: number; numero_bon_con: string; iduser: number; identreprise: number; modepaiement: number; mode_livraison: string; banque: number; iban_rib: string; liste_idopps: string }
export type Local = { idlocal: number; section: string; adresse: string; information: string; iduser: number }
export type NewLieustockage = { nom: string; information: string; iduser: number }
export type FormattedDataResultsRessAchats = { dbname: string; data: Tableressourceachat[] }
export type NewDocument = { code: string; reference: string; revision: string; audit: string; information: string; date_creation: string; url: string; iduser: number; setting_for: string }
export type Tablevente = { idvente: number; idclient: number; type_caisse: number; nbr_caisse: number; nbr_cs: number; nbr_cn: number; nbr_ca: number; matriel1: number; nbr_m1: number; matriel2: number; nbr_m2: number; emballage: number; nbr_emballage: number; nbr_cov: number; nbr_fon: number; matiere_principale: number; qte_brut: number; qte_net: number; prix_unit: number; montant: number; date_vente: string; observation: string; num_fact: number; idbon_reclam: number; idbon_recp: number; idbon_entree: number; idcateg: number; iduser: number; type_produit: number; lieu_stock: number; selected: string; num_lot: string }
export type NewTableressourceachat = { idfornisseur: number; montant: number; type_paiement: number; nbr_cs: number; nbr_cn: number; nbr_ca: number; type_caisse: number; nbr_matriel: number; type_matriel: number; emballage: number; nbr_emb: number; nbr_cov: number; nbr_fon: number; information: string; date_ressource_achat: string; lieu_stock: number; iddoc: number; iduser: number }
export type NewUser = { login: string; password: string; role: string; date_creation: string; last_login: string; is_connected: number; locked: number; nbr_attempts: number; allowed_module: string; deleted: number; created_by: number; theme: string; user_agent: string }
export type Lieutravail = { idlieu_travail: number; nom_lieu: string; information: string; iduser: number }
export type Typeproduit = { idtype_prod: number; nom: string; information: string; iduser: number }
export type NewTableressourcevente = { idclient: number; montant: number; type_paiement: number; type_caisse: number; nbr_cs: number; nbr_cn: number; nbr_ca: number; nbr_matriel: number; type_matriel: number; emballage: number; nbr_emb: number; nbr_cov: number; nbr_fon: number; information: string; date_ressource_vente: string; lieu_stock: number; iddoc: number; iduser: number }
export type NewFournisseur = { nom: string; adresse: string; tel_mob: string; tel_fix: string; mail: string; fax: string; specialite: string; note: string; rib: string; matricule: string; date_creation: string; ajouter_par: number; statut: string; information: string; type_fornisseur: string; iduser: number }
export type NewSession = { expires: number; data: string }
export type NewComptebancaire = { nom_banque: string; iban: string; rib: string; swift: string; iduser: string }
export type Lieustockage = { idlieu_stockage: number; nom: string; information: string; iduser: number }
export type Paiement = { idpaiement: number; nom: string; description: string; iduser: number }
export type GetTotauxResponse = { total_opp_mont: number; total_opp_caisse: number; total_opp_emb: number; total_opp_mat1: number; total_opp_mat2: number; total_opp_ress_mont: number; total_opp_ress_mat: number; total_opp_ress_emb: number; total_opp_ress_caisse: number }
export type FormattedDataResults = { dbname: string; data: Fournisseur[] }
export type Setting = { id: number; iddoc_normal: number; iddoc_impexp: number; iddoc_avoir: number; iddoc_normal_vente: number; iddoc_impexpvente: number; iddoc_avoir_vente: number; identreprise: number; idcompte: number; iddoc_devis: number; iddoc_proformat: number; liste_ids_doc_to_print: string; iddoc_rapport: number; iddoc_scann: number; iduser: number }
export type Produit = { idproduit: number; nom: string; idtype_prod: number; nom_type_prod: string; commentaire: string; iduser: number }
export type Comptebancaire = { idcompte: number; nom_banque: string; iban: string; rib: string; swift: string; iduser: string }
export type NewProduit = { nom: string; idtype_prod: number; nom_type_prod: string; commentaire: string; iduser: number }
export type NewPaiement = { nom: string; description: string; iduser: number }
export type NewSaison = { annee: string; nom: string; information: string; iduser: number }
export type GetTotauxRequest = { id: string; all_opps: Tableachat[]; all_ress: Tableressourceachat[]; fc: string }
export type Tablefactureavoir = { idfact_avoir: number; idfact: number; idclient: number; type_produit: string; montant: number; reference_doc: number; information: string; iduser: number; date_facture_avoir: string; idcateg: number }
export type NewTablearchivedoc = { iddocument: number; url: string; fichier: string; datecreation: string; commentaire: string; iduser: number }
export type Personnel = { idpersonnel: number; nom_prenom: string; cin: string; date_naissance: string; sexe: string; adresse: string; tel: string; date_recrutement: string; statut: string; titre: string; iduser: number; prix_h: number; prix_j: number; prix_u: number; idcv: number; idcontrat: number; iddocument: number }
export type Facture = { idfact: number; numero: number; iddoc: number; idclient: number; type_fact: string; date_facture: string; op1: number; op2: number; op3: number; op4: number; op5: number; op6: number; op7: number; op8: number; op9: number; op10: number; information: string; idbon_rec: number; numero_bon_rec: number; idbon_com: number; numero_bon_com: number; idbon_con: number; numero_bon_con: number; iduser: number; identreprise: number; liste_idopps: string }
export type NewFactureexport = { numero: string; iddoc: number; idclient: number; type_fact: string; date_facture_export: string; op1: number; op2: number; op3: number; op4: number; op5: number; op6: number; op7: number; op8: number; op9: number; op10: number; information: string; idbon_rec: number; numero_bon_rec: number; idbon_com: number; numero_bon_com: number; idbon_con: number; numero_bon_con: string; iduser: number; identreprise: number; modepaiement: number; mode_livraison: string; banque: number; iban_rib: string; liste_idopps: string }
export type Tablearchivedoc = { idarch_doc: number; iddocument: number; url: string; fichier: string; datecreation: string; commentaire: string; iduser: number }
export type Tableressourcevente = { idres_vente: number; idclient: number; montant: number; type_paiement: number; type_caisse: number; nbr_cs: number; nbr_cn: number; nbr_ca: number; nbr_matriel: number; type_matriel: number; emballage: number; nbr_emb: number; nbr_cov: number; nbr_fon: number; information: string; date_ressource_vente: string; lieu_stock: number; iddoc: number; iduser: number }
export type NewEquipement = { nom: string; periode_revision: number; statut: string; idbon: number; information: string; date_mise_en_service: string; date_control: string; iduser: number }
export type NewLieutravail = { nom_lieu: string; information: string; iduser: number }
export type Tabletransfert = { idtransfert: number; de: number; a: number; nbr_caisse: number; type_caisse: number; nbr_cn: number; nbr_cs: number; nbr_ca: number; qte_net: number; produit: number; nbr_matriel: number; matriel: number; idemballage: number; nbr_emb: number; nbr_cov: number; nbr_fond: number; information: string; date_transfer: string; iduser: number }
export type Tableachat = { idachat: number; idfournisseur: number; type_caisse: number; nbr_caisse: number; nbr_cs: number; nbr_cn: number; nbr_ca: number; matriel1: number; nbr_m1: number; matriel2: number; nbr_m2: number; emballage: number; nbr_emballage: number; nbr_cov: number; nbr_fon: number; matiere_principale: number; qte_brut: number; qte_net: number; prix_unit: number; montant: number; date_achat: string; observation: string; num_fact: number; idbon_reclam: number; idbon_recp: number; idbon_entree: number; idcateg: number; iduser: number; type_produit: number; lieu_stock: number; selected: string; num_lot: string }
export type NewDepense = { nom: string; information: string; iduser: number }
export type Depense = { idtype_depense: number; nom: string; information: string; iduser: number }
